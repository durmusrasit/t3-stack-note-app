import React, { useState, useEffect, useCallback } from "react";
import { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../_app";
import { NoteForm } from "../../components/NoteForm";
import Link from "next/link";
import { timeUntilStale } from "react-query/types/core/utils";

import { Button, Label, Textarea, TextInput } from "flowbite-react";
import Navigation from "../../components/Navigation";
import useDarkMode from "../../utils/useDarkMode";

export interface INote {
    title: string;
    body: string;
    type: string;
}

const CreateNote: NextPage = () => {
    const [colorTheme, setTheme] = useDarkMode();
    
    const [formField, setFormField] = useState<INote>({ title: "", body: "", type: "" });
    const [errorData, setErrorData] = useState<{ [x: string]: string[] | undefined; [x: number]: string[] | undefined; [x: symbol]: string[] | undefined; }>({ title: [], body: [], type: []});
    
    const { title, body, type } = formField;
    
    const insertMutation = trpc.note.createNote.useMutation({
        async onSuccess() {
            alert("success");
        },

        async onError() {
            if (insertMutation.error?.data?.zodError) {
                const fieldErrors = insertMutation.error.data.zodError.fieldErrors;

                setErrorData(fieldErrors);
            }
        }
    });

    const handleFieldChange = (e: React.FormEvent<HTMLInputElement>): void => {
        setFormField((formField) => ({
            ...formField,
            [e.target.id]: e.target.value,
        }));
    }

    const hasError = (field: string | number) => {
        return !!errorData[field];
    }

    const inputColors = (hasError: any) => hasError ? "failure" : "success";

    const renderError = (field: string | number) => {
        if (hasError(field)) {
            return <React.Fragment>{errorData[field]}</React.Fragment>
        }
    }

    const insertNote = useCallback((event: () => void) => {
        event.preventDefault();
        insertMutation.mutate(formField);
    }, [formField, insertMutation]);
    
    return (
        <>
        <Head>
            <title>Create A Note</title>
            <meta name="description" content="Generated by create-t3-app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        
        <div className="dark:bg-black dark:text-white">
            <Navigation />

            <main className="container mx-auto flex flex-col items-center justify-items min-h-screen p-4">
                
                <h3 className="text-2xl mb-8">Create A Note</h3>
                <div className="flex flex-col gap-4">
                    <form onSubmit={insertNote}>
                    <div>
                        <div className="mb-2 block">
                            <Label htmlFor="title" value="Title" />
                        </div>
                        <TextInput id="title" type="text" placeholder="Write a title" onChange={handleFieldChange} value={title} required={true} color={`${inputColors(hasError("title"))}`} helperText={renderError("title")} />
                    </div>
                    <div>
                        <div className="mb-2 block">
                            <Label htmlFor="type" value="Type" />
                        </div>
                        <TextInput id="type" type="text" placeholder="Write a type" onChange={handleFieldChange} value={type} required={true} color={`${inputColors(hasError("type"))}`} helperText={renderError("type")} />
                    </div>
                    <div id="textarea">
                        <div className="mb-2 block">
                            <Label htmlFor="body" value="Body" />
                        </div>
                        <Textarea id="body" type="text" placeholder="Write a body" onChange={handleFieldChange} value={body} rows={4} required={true} color={`${inputColors(hasError("body"))}`} helperText={renderError("body")} />
                    </div>
                    <div className="mb-6">
                        <Button color="purple" type="submit">Send</Button>
                    </div>
                    </form>
                </div>
            </main>
        </div>
        </>
    );
}

export default CreateNote;